openapi: 3.0.1
info:
  title: Investments.Api
  version: '1.0'
paths:
  /createuser:
    post:
      tags:
        - Backoffice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/PostUserRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PostUserRequest'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
  /createcustomer:
    post:
      tags:
        - Backoffice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCustomerRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/PostCustomerRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PostCustomerRequest'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
  /createproduct:
    post:
      tags:
        - Backoffice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostProductRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/PostProductRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PostProductRequest'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
  /product/{productId}:
    put:
      tags:
        - Backoffice
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: price
          in: query
          schema:
            type: number
            format: double
        - name: quantity
          in: query
          schema:
            type: integer
            format: int32
        - name: productType
          in: query
          schema:
            $ref: '#/components/schemas/ProductTypeEnum'
        - name: dueDate
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
    delete:
      tags:
        - Backoffice
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
  /email:
    post:
      tags:
        - Backoffice
      parameters:
        - name: request
          in: query
          schema:
            $ref: '#/components/schemas/SendEmailNotification'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
  /balance/{customerId}:
    put:
      tags:
        - Customer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: transactionType
          in: query
          schema:
            $ref: '#/components/schemas/TransactionTypeEnum'
        - name: amount
          in: query
          schema:
            type: number
            format: double
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unit'
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
            text/json:
              schema:
                $ref: '#/components/schemas/Unit'
  /transactions/{customerId}:
    get:
      tags:
        - Customer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unit'
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
            text/json:
              schema:
                $ref: '#/components/schemas/Unit'
  /products:
    get:
      tags:
        - Products
      parameters:
        - name: Id
          in: query
          schema:
            type: integer
            format: int32
        - name: Description
          in: query
          schema:
            type: string
        - name: ProductType
          in: query
          schema:
            $ref: '#/components/schemas/ProductTypeEnum'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetProductsResponse'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetProductsResponse'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetProductsResponse'
    post:
      tags:
        - Products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostProductByCustomerRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/PostProductByCustomerRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PostProductByCustomerRequest'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
  /TestHandler:
    get:
      tags:
        - Test
      parameters:
        - name: ChooseResponse
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TestResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/TestResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/TestResponse'
components:
  schemas:
    GetProductsResponse:
      type: object
      properties:
        productId:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        price:
          type: number
          format: double
        productType:
          $ref: '#/components/schemas/ProductTypeEnum'
        dueDate:
          type: string
          format: date-time
      additionalProperties: false
    PostCustomerRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        accountBalance:
          type: number
          format: double
      additionalProperties: false
    PostProductByCustomerRequest:
      type: object
      properties:
        customerId:
          type: integer
          format: int32
        productId:
          type: integer
          format: int32
        quantity:
          type: integer
          format: int32
        transactionType:
          $ref: '#/components/schemas/TransactionTypeEnum'
      additionalProperties: false
    PostProductRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        price:
          type: number
          format: double
        productType:
          $ref: '#/components/schemas/ProductTypeEnum'
        dueDate:
          type: string
          format: date-time
      additionalProperties: false
    PostUserRequest:
      type: object
      properties:
        userName:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
      additionalProperties: false
    ProductTypeEnum:
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
      type: integer
      format: int32
    SendEmailNotification:
      type: object
      additionalProperties: false
    TestResponse:
      type: object
      properties:
        response:
          type: string
          nullable: true
      additionalProperties: false
    TransactionTypeEnum:
      enum:
        - 0
        - 1
        - 2
        - 3
      type: integer
      format: int32
    Unit:
      type: object
      additionalProperties: false
